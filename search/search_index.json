{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ol\u00e1, eu sou a Carol.","text":"<p>A ideia desse site/reposit\u00f3rio \u00e9 armazenar as notas das coisas que vou estudando ao longo do tempo, para que eu possa ter como uma base de consulta al\u00e9m de ajudar outras pessoas que possam estar vendo os mesmos assuntos.</p>"},{"location":"arquitetura/DDD/intro/","title":"DDD","text":"<p>DDD \u00e9 focado em criar solu\u00e7\u00f5es e resolver problemas de forma estruturada.</p> <p>Normalmente tendemos a come\u00e7ar a codar antes de analisar como solucionar o problema, pegando o contexto por cima, o que pode vir a gerar d\u00e9bitos t\u00e9cnicos e tornar o c\u00f3digo mais complexo de dar manuten\u00e7\u00e3o.</p> <p>Isso normalmente gera alguns problemas bem conhecidos dentro dos projetos:</p> <ul> <li>Falta de clareza nos objetivos - Dependendo de com quem esteja discutindo a solu\u00e7\u00e3o, as necessidades podem divergir e isso se torna um problema ao longo do tempo.</li> <li>Scope Creep - O escopo troca sempre, sem controle.</li> <li>Expectativas irreais</li> <li>Recursos limitados</li> <li>Falha na comunica\u00e7\u00e3o</li> <li>Atraso nas entregas</li> <li>Falta de transpar\u00eancia</li> </ul>"},{"location":"arquitetura/DDD/intro/#o-que-e-dominio","title":"O que \u00e9 dom\u00ednio?","text":"<p>\u00c9 o neg\u00f3cio em si, o motivo da empresa existir e estar atuando no mercado. Como exemplo podemos ter uma escola que o dom\u00ednio seria educa\u00e7\u00e3o, um streaming que o dom\u00ednio seria fornecer v\u00eddeos, etc.</p>"},{"location":"arquitetura/DDD/intro/#o-que-e-um-subdominio-principal","title":"O que \u00e9 um subdom\u00ednio principal?","text":"<p>\u00c9 o seu foco principal, o que te diferencia de outros concorrentes no mercado e normalmente possui uma l\u00f3gica complexa associada. Como exemplo temos no caso da Alura que \u00e9 fornecer pelo pre\u00e7o de 1 assinatura milhares de cursos, ou a Netflix que te fornece um sistema de recomenda\u00e7\u00e3o de s\u00e9ries \u00fanico).</p> <p>Esse dom\u00ednio principal pode se alterar com base em quem est\u00e1 analisando, exemplo, o streaming da Netflix pode usar uma tecnologia \u00fanica que torna a experi\u00eancia do usu\u00e1rio muito mais veloz, mas para o usu\u00e1rio final n\u00e3o seria um fator principal. Ou seja, quando fiz\u00e9ssemos as entrevistas ter\u00edamos conflito entre essas vis\u00f5es.</p>"},{"location":"arquitetura/DDD/intro/#o-que-e-um-subdominio-generico","title":"O que \u00e9 um subdom\u00ednio gen\u00e9rico?","text":"<p>S\u00e3o processos que s\u00e3o comuns no mercado e a todas (ou quase todas as empresas), por exemplo sistema de folha de ponto, sistema de pagamento, fun\u00e7\u00f5es de autentica\u00e7\u00e3o, etc. Sua l\u00f3gica pode ser complexa ou simples, tudo depende do tipo de subdom\u00ednio gen\u00e9rico.</p> <p>O neg\u00f3cio n\u00e3o ser\u00e1 impactado caso tenha algum problema nesse subdom\u00ednio (ex- se o programa da folha de ponto para de funcionar, voc\u00ea pode ainda assim fazer em uma planilha sem impacto ao neg\u00f3cio).</p>"},{"location":"arquitetura/DDD/intro/#o-que-e-um-subdominio-de-suporte","title":"O que \u00e9 um subdom\u00ednio de suporte?","text":"<p>Complementa o subdom\u00ednio principal da empresa, n\u00e3o fornece nenhuma vantagem estrat\u00e9gica para o neg\u00f3cio. Pode haver problemas para a empresa caso esse subdom\u00ednio seja afetado.</p> <p>Um exemplo disso seria a equipe de marketing de uma escola, se eles n\u00e3o conseguirem atingir leads e fazer com que a escola seja notada, mesmo com o melhor ensino sendo entregue como um dos subdom\u00ednios principais o neg\u00f3cio ainda ser\u00e1 impactado caso tenha um problema.</p>"},{"location":"arquitetura/DDD/intro/#o-que-sao-domain-experts","title":"O que s\u00e3o domain experts?","text":"<p>Pessoas que sabem sobre todos os processos e coisas que acontecem na sua \u00e1rea, em uma empresa (ex escola) podem haver diversos Domain Experts, cada um focado em sua \u00e1rea.</p> <p>Voc\u00ea pode chamar pessoas de outras \u00e1reas quando estiver entrevistando Domain Experts, mas eles devem ser tratados como auxiliares caso n\u00e3o sejam experts na \u00e1rea que voc\u00ea est\u00e1 analisando.</p> <p>Sempre bom entender que os domain experts normalmente n\u00e3o v\u00e3o possuir os processos mega detalhados, eles provavelmente s\u00f3 executam no autom\u00e1tico a anos e cabe a pessoa entrevistando estruturar esses pontos.</p>"},{"location":"arquitetura/concorrencia/intro/","title":"Concorr\u00eancia","text":"<p>Essas anota\u00e7\u00f5es s\u00e3o provenientes da aula programa\u00e7\u00e3o concorrente do canal Luciano Ramalho</p>"},{"location":"arquitetura/concorrencia/intro/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Normalmente confundimos paralelismo e concorr\u00eancia como coisas muito parecidas (as vezes at\u00e9 iguais), mas esses conceitos possuem diferen\u00e7as fundamentais que precisamos nos atentar.</p> <p>Paralelismo pode ser definido, como quando voc\u00ea possui infraestrutura no computador para executar m\u00faltiplas tarefas ao mesmo tempo (ex - CPU com v\u00e1rios n\u00facleos).</p> <p>Enquanto concorr\u00eancia por outro lado envolve em um gerenciamento do computador, onde ele decide qual processo deve come\u00e7ar e qual deve ser interrompido para conseguir executar no melhor tempo poss\u00edvel o que o usu\u00e1rio solicita.</p> <p>Por exemplo, os computadores utilizam mais concorr\u00eancia do que paralelismo.</p> <p></p> <p>Quando olhamos para o gerenciador de tarefas, entendemos que ele n\u00e3o est\u00e1 executando todos esses processos ao mesmo tempo (em paralelo), mas sim gerenciando a execu\u00e7\u00e3o de cada um em concorr\u00eancia.</p> <p>Ele realiza um task switching entre as tarefas com velocidade, ent\u00e3o parece que est\u00e1 tudo executando ao mesmo tempo.</p> <p>A intel desenvolveu a quest\u00e3o do hyperthreading, onde a CPU consegue gerar dentro de cada n\u00facleo mais de uma thread para execu\u00e7\u00f5es em paralelo. Ent\u00e3o uma CPU de 4 cores, teria 8 se utilizasse hyperthreading.</p> <p>Vector instructions \u2192 Altera\u00e7\u00f5es em grandes peda\u00e7os de mem\u00f3ria. Um exemplo onde isso \u00e9 usado \u00e9 em edi\u00e7\u00f5es de v\u00eddeos e imagens, onde voc\u00ea sinaliza para o computador que aquele peda\u00e7o de mem\u00f3ria deve ser alterado conforme uma condi\u00e7\u00e3o e isso \u00e9 um tipo de paralelismo.</p> <p>GPU \u2192 Unidade de processamento gr\u00e1fico separada da CPU, ela tamb\u00e9m pode ser usada para fazer c\u00e1lculos num\u00e9ricos muito r\u00e1pidos e \u00e9 um tipo de paralelismo.</p>"},{"location":"arquitetura/concorrencia/intro/#como-um-computador-consegue-fazer-varias-coisas-ao-mesmo-tempo","title":"Como um computador consegue fazer v\u00e1rias coisas ao mesmo tempo?","text":"<p>Ele realiza isso atrav\u00e9s de mecanismos de implementa\u00e7\u00e3o de concorr\u00eancia. Sendo eles:</p> <p>Interupt \u2192 Toda CPU, tem v\u00e1rios pinos soldados onde v\u00e1rias coisas podem ser conectadas (assim como um Arduino), e dentre esses pinos ela possui 2 que s\u00e3o chamados de Interrupt. Basicamente esses pinos quando recebem algum sinal el\u00e9trico, param o programa principal que est\u00e3o executando, trocam de processo (atrav\u00e9s de uma tabela com ponteiros de mem\u00f3ria das op\u00e7\u00f5es que possuem) e v\u00e3o executar o novo processo. Assim que ele acabar eles voltam para o que estavam fazendo.</p> <p>Um exemplo disso acontecendo seria o Mouse, porque o sistema operacional n\u00e3o precisa ficar escutando sempre se o mouse est\u00e1 se movendo ou n\u00e3o, a CPU recebe um interrupt e sinaliza que esse processo do mouse precisa ser executado.</p> <p>Callback \u2192 Fun\u00e7\u00e3o que \u00e9 executada depois que um processo acaba. Enquanto em python quando pedimos pra abrir um arquivo, ficamos esperando por ele, no node por exemplo conseguimos definir um callback e isso permite que o computador v\u00e1 fazer outras coisas e s\u00f3 execute aquela outra instru\u00e7\u00e3o quando a inicial ficar pronta.</p> <p>Kernel thread \u2192 a lista de tarefas que s\u00e3o executadas no kernel.</p> <p>process \u2192 Processos executados pelo sistema operacional, ele \u00e9 gerenciado e consegue organizar a concorr\u00eancia delas. Mais pesado que userland threads e coroutines. Processos podem disparar v\u00e1rias threads, mas ele n\u00e3o tem acesso a mem\u00f3ria de outros processos.</p> <p>Userland thread (OS Threads - do sistema operacional) \u2192 Threads que o usu\u00e1rio consegue criar. Mais r\u00e1pido de ser criado que process, mas mais pesado em aloca\u00e7\u00e3o de mem\u00f3ria que coroutines. Threads podem acessar mem\u00f3ria de outras threads.</p> <p>coroutine \u2192 Thread mais leve (fica dentro de uma thread), n\u00e3o tem uma aloca\u00e7\u00e3o de mem\u00f3ria grande. Ideal pra fazer I/O, porque elas n\u00e3o precisam ficar todas ativas. Pra n\u00e3o alocar uma coroutine dentro de uma thread inteira, existem algumas palavras como await por exemplo que permite que ela n\u00e3o ocupe tudo.</p> <p>actor \u2192 Ocorre em algumas linguagens. \u00c9 como se cada ator fosse um software, que tivesse uma thread pr\u00f3pria onde pode ser executado. N\u00e3o tem compartilhamento de mem\u00f3ria.</p>"},{"location":"arquitetura/concorrencia/intro/#intercambio-de-dados","title":"Interc\u00e2mbio de dados","text":"<p>Compartilhamento de mem\u00f3ria \u2192 Pra rodar v\u00e1rias coisas juntas em concorr\u00eancia, o compartilhamento de mem\u00f3ria \u00e9 uma forma de fazer isso funcionar. O problema disso \u00e9 a mutabilidade dos dados pode gerar race condition, onde a que executar primeiro a opera\u00e7\u00e3o pode gerar altera\u00e7\u00e3o no dado que vai afetar a pr\u00f3xima thread que n\u00e3o est\u00e1 esperando isso (ou est\u00e1 executando ao mesmo tempo).</p> <p>Message passing \u2192 Os processos se comunicam atrav\u00e9s de mensagem (enviando c\u00f3pia dos dados), e sem mem\u00f3ria compartilhada. Isso d\u00e1 certo em Erlang porque os dados s\u00e3o todos imut\u00e1veis.</p> <p>Queue/channel \u2192 Voc\u00ea enfilera processos e eles v\u00e3o sendo retirados conforme a necessidade.</p>"},{"location":"arquitetura/concorrencia/intro/#sincronizacao","title":"Sincroniza\u00e7\u00e3o","text":"<p>A meta \u00e9 evitar que as coisas executem na ordem certa, sem uma coisa sobrepor a outra.</p> <p>Filas e canais s\u00e3o muito usados nisso.</p> <p>Lock e semaphore s\u00e3o outras ferramentas utilizadas.</p> <p>Devemos evitar travar demais o sistema pra sempre estar sincronizado porque perdemos performance, e nem deixar super aberto pra evitar travas.</p> <p>Runtimes \u2192 Ambiente de execu\u00e7\u00e3o de uma linguagem de programa\u00e7\u00e3o</p> <p>Monocore \u2192 S\u00f3 consegue usar um n\u00facleo da CPU (Python, Node, etc)</p> <p>No caso de Python, ele s\u00f3 consegue se for integrado com outra lib que permita isso.</p> <p>Multicore \u2192 Consegue usar m\u00faltiplos n\u00facleos da CPU (Java, Go, Elixir)</p> <p>Linguagens funcionais \u2192 S\u00e3o consideradas as melhores linguagens pra trabalhar com concorr\u00eancia</p> <p>Elas s\u00e3o melhor preparadas pra ter dados imut\u00e1veis, e evitar os problemas que temos por concorr\u00eancia de dados etc.</p>"},{"location":"arquitetura/design-patterns/creational/singleton/","title":"Singleton","text":"<p>Defini\u00e7\u00e3o:</p> <p>Garantir que uma classe tenha somente uma inst\u00e2ncia no programa e fornecer um ponto de acesso global para a mesma.</p>"},{"location":"arquitetura/design-patterns/creational/singleton/#principal-problema-que-ele-apresenta","title":"Principal problema que ele apresenta","text":"<p>O singleton acaba ferindo o princ\u00edpio da responsabilidade \u00fanica, porque algumas pessoas discutem que o fato de ele controlar seu pr\u00f3prio ciclo de vida (fora o que j\u00e1 fazem por default).</p>"},{"location":"arquitetura/design-patterns/creational/singleton/#principais-problemas-que-ele-se-propoe-e-resolver","title":"Principais problemas que ele se prop\u00f5e e resolver","text":""},{"location":"arquitetura/design-patterns/creational/singleton/#garantir-que-uma-classe-apenas-tenha-uma-unica-instancia","title":"Garantir que uma classe apenas tenha uma \u00fanica inst\u00e2ncia","text":"<p>Ou seja, garantir que o acesso a algum recurso (ex - banco de dados) seja mais controlado, ou seja, ao inv\u00e9s de termos v\u00e1rias inst\u00e2ncias do mesmo objeto, temos apenas um e ele controla a disponibiliza\u00e7\u00e3o desse recurso.</p> <p>\u26a0\ufe0f Isso \u00e9 imposs\u00edvel de ser realizado se a classe ainda pode ser instanciada atrav\u00e9s do <code>constructor</code>, por isso sempre deixamos ele como privado nessas situa\u00e7\u00f5es e criamos um m\u00e9todo que cheque se precisamos criar uma inst\u00e2ncia ou reutilizar uma j\u00e1 existente.</p>"},{"location":"arquitetura/design-patterns/creational/singleton/#provem-um-ponto-de-acesso-global-para-a-instancia","title":"Prov\u00e9m um ponto de acesso global para a inst\u00e2ncia","text":"<p>Em qualquer parte do projeto (independentemente do arquivo) essa propriedade deve poder ser acessada.</p> <p>\ud83d\udca1 Em JS, cada vez que fazemos um import, \u00e9 uma esp\u00e9cie de singleton pq n\u00e3o estamos criando novas inst\u00e2ncias, apenas referenciando uma j\u00e1 existente.</p> <p>Ele tamb\u00e9m previne que o c\u00f3digo possa ser sobrescrito por outra implementa\u00e7\u00e3o, visto que teremos sempre apenas uma inst\u00e2ncia do objeto. Caso queiramos sobrescrever algum comportamento pr\u00e9-definido, precisamos fazer com que o singleton espere isso.</p>"},{"location":"arquitetura/design-patterns/creational/singleton/#observacoes","title":"Observa\u00e7\u00f5es","text":"<p>Com esse padr\u00e3o, temos algo chamado <code>lazy initialization</code> que basicamente \u00e9 criar o objeto/inst\u00e2ncia apenas quando ele \u00e9 necess\u00e1rio e n\u00e3o quando o programa inicia.</p> <p>\u00c9 mais dif\u00edcil usar esse padr\u00e3o em linguagens que permitem multi threads, muito porque se torna complexo evitar que sejam criadas inst\u00e2ncias em cada thread.</p> <p>Uma das recomenda\u00e7\u00f5es de quando usar esse padr\u00e3o \u00e9 tamb\u00e9m quando voc\u00ea precisa usar uma vari\u00e1vel de ambiente em v\u00e1rias partes importante do programa, porque elas podem ser sobrescritas mas o singleton n\u00e3o.</p>"},{"location":"arquitetura/design-patterns/creational/singleton/#links-interessantes","title":"Links interessantes","text":"<p>[Refactoring Guru] Singleton</p> <p>[Ot\u00e1vio Miranda] **Singleton Teoria - Padr\u00f5es de Projeto - Parte 4/45**</p> <p>[StackOverflow] Discuss\u00e3o sobre como singleton pode ferir o princ\u00edpio da responsabilidade \u00fanica</p>"},{"location":"linguagens-de-programacao/golang/intro/","title":"Introdu\u00e7\u00e3o Golang","text":""},{"location":"linguagens-de-programacao/golang/intro/#packages","title":"Packages","text":"<p>Todo programa em Go \u00e9 baseado em pacotes, e \u00e9 executado a partir do pacote main (e dentro da fun\u00e7\u00e3o main, assim como a linguagem Java).</p> <p>Por conven\u00e7\u00e3o o nome do pacote \u00e9 sempre a \u00faltima parte do pacote importado, por exemplo o pacote <code>math/rand</code>, quando formos chamar ele a n\u00edvel de c\u00f3digo, chamaremos como <code>rand</code>.</p>"},{"location":"linguagens-de-programacao/golang/intro/#imports","title":"Imports","text":"<p>Voc\u00ea pode realizar imports em go de duas formas. Sendo a mais indicada o modelo \"factored\":</p> <pre><code>import (\n  \"fmt\"\n  \"math\"\n)\n</code></pre> <p>Contudo tamb\u00e9m se \u00e9 poss\u00edvel importar da seguinte forma:</p> <pre><code>import \"fmt\"\nimport \"math\"\n</code></pre>"},{"location":"linguagens-de-programacao/golang/intro/#exported-names","title":"Exported names","text":"<p>Quando vamos usar m\u00e9todos de algum pacote, existem os nomes \"importados\" e \"n\u00e3o importados\". O que nos sinaliza eles \u00e9 a quest\u00e3o da capitaliza\u00e7\u00e3o das letras.</p> <p>Por exemplo, o pacote <code>math</code> possui o m\u00e9todo <code>Pi</code> que nos retorna o valor de pi. Conseguimos acessar ele depois de importar o m\u00e9todo.</p> <p>Contudo se ele tivesse outro m\u00e9todo chamado <code>pi</code> com letras min\u00fasculas n\u00e3o poder\u00edamos importar ele.</p>"},{"location":"linguagens-de-programacao/typescript/utility-types/","title":"Utility Types","text":"<p>Anota\u00e7\u00f5es feitas com base na palestra Typescript - Utility Types</p>"},{"location":"linguagens-de-programacao/typescript/utility-types/#partialtype","title":"Partial<code>&lt;type&gt;</code>","text":"<p>O tipo que voc\u00ea declara dentro das chaves, se torna opcional. Ent\u00e3o por exemplo se tivermos uma interface User, tudo dentro dele se torna opcional (nome, e-mail, etc).</p>"},{"location":"linguagens-de-programacao/typescript/utility-types/#required-type","title":"Required <code>&lt;type&gt;</code>","text":"<p>O tipo declarado dentro das chaves, ao contr\u00e1rio do Partial se torna totalmente obrigat\u00f3rio, mesmo se tiver itens opcionais.</p>"},{"location":"linguagens-de-programacao/typescript/utility-types/#picktype-keys","title":"Pick<code>&lt;Type, Keys&gt;</code>","text":"<p>Voc\u00ea consegue construir uma interface apenas com as propriedades que voc\u00ea quer, referenciando o Tipo e as chaves desse tipo que voc\u00ea quer.</p>"},{"location":"linguagens-de-programacao/typescript/utility-types/#omittype-keys","title":"Omit<code>&lt;Type, Keys&gt;</code>","text":"<p>Oposto do Pick, aqui voc\u00ea decide o que quer ocultar da interface.</p>"},{"location":"linguagens-de-programacao/typescript/utility-types/#recordkeystype","title":"Record<code>&lt;Keys,Type&gt;</code>","text":"<p>Imaginemos que voc\u00ea tem uma interface onde as chaves s\u00e3o n\u00fameros, e todos eles seguem um formato de ter como valor um objeto com duas strings, aqui voc\u00ea pode definir isso sem maiores problemas. A ideia \u00e9 criar um tipo repet\u00edvel.</p>"},{"location":"shell/comandos/","title":"Comandos","text":"<p>Anota\u00e7\u00f5es baseadas na aula 1 do Missing Semester of CS - MIT</p>"},{"location":"shell/comandos/#o-que-e-o-shell","title":"O que \u00e9 o shell","text":"<p>bash/shell (ou como conhecemos, o bom e velho terminal) \u00e9 uma linguagem de programa\u00e7\u00e3o, ele conhece os comandos, porque os programas respons\u00e1veis por eles est\u00e3o dentro dele. Ent\u00e3o voc\u00ea pode loops, fun\u00e7\u00f5es, etc dentro dele.</p>"},{"location":"shell/comandos/#comandos-aleatorios-mas-interessantes","title":"Comandos aleat\u00f3rios mas interessantes","text":"<p><code>date</code> \u21d2 retorna a data do dia.</p> <p><code>echo</code> \u21d2 imprime no terminal o que vem dps dele.</p> <p><code>echo $PATH</code> \u21d2 Esse comando emite todas as pastas que guardam os comandos dispon\u00edveis para serem executados no Shell. Quando solicitamos algo, \u00e9 nessas pastas que ele procura o c\u00f3digo respons\u00e1vel pelo comando (se existir).</p> <p><code>which</code> \u2192 Sinaliza de onde est\u00e1 vindo o comando que estamos rodando, exemplo <code>which aws</code>, me mostra a pasta onde t\u00e1 os arquivos da aws que eu rodo no terminal quando chamo o comando.</p> <p><code>cat</code> \u21d2 l\u00ea arquivos e exibe o conte\u00fado no terminal.</p> <p><code>tee</code> \u21d2 al\u00e9m de escrever em arquivos, ele exibe o resultado no terminal.</p> <p><code>tail -n &lt;quantidade de linhas&gt;</code> \u21d2 Imprime as \u00faltimas n linhas de um input fornecido a ele (arquivo por exemplo)</p>"},{"location":"shell/comandos/#comandos-relacionados-a-pastascaminhos","title":"Comandos relacionados a pastas/caminhos","text":"<p><code>xdg-open &lt;pasta/arquivo&gt;</code> \u21d2 Necess\u00e1rio instala\u00e7\u00e3o no wsl2 (link aqui), mas voc\u00ea indica o arquivo ou pasta a abrir, e ele abre o mesmo com o aplicativo adequado.</p> <p><code>cd (change directory) &lt;caminho relativo at\u00e9 onde voc\u00ea deseja ir&gt;</code> \u21d2 altera a pasta que voc\u00ea est\u00e1 no momento.</p> <p><code>cd -</code> \u21d2 Te retorna pro diret\u00f3rio que voc\u00ea estava anteriormente.</p> <p><code>ls -l</code> \u21d2 fornece mais informa\u00e7\u00f5es sobre os diret\u00f3rios que estamos olhando (arquivos, pastas, permiss\u00f5es, etc).</p> <p><code>pwd (print working directory)</code> \u21d2 exibe o caminho onde voc\u00ea est\u00e1 atualmente (qual pasta).</p>"},{"location":"shell/comandos/#copiarmover-arquivos","title":"Copiar/mover arquivos","text":"<p><code>mv &lt;old name of a file/folder&gt; &lt;new name&gt;</code> - Permite renomear arquivos e pastas.</p> <p><code>copy &lt;old name of a file/folder&gt; &lt;new name&gt;</code> - Permite renomear arquivos e pastas.</p>"},{"location":"shell/comandos/#remover-arquivospastas","title":"Remover arquivos/pastas","text":"<p><code>rm &lt;caminho&gt;</code> \u2192 voc\u00ea pode remover arquivos. Esse comando n\u00e3o \u00e9 recursivo, ent\u00e3o n\u00e3o consegue apagar pastas.</p> <p><code>rm -rf</code> \u21d2 Permite apagar pastas com coisas dentro (recursivo).</p> <p><code>rmdir &lt;pasta&gt;</code> \u21d2 Permite apagar pastas vazias.</p>"},{"location":"shell/comandos/#para-saber-mais-sobre-o-comando-utilizado","title":"Para saber mais sobre o comando utilizado","text":"<p><code>&lt;comando&gt; \u2014help</code> \u21d2 Fornece informa\u00e7\u00f5es sobre o comando, para que serve e como utilizar ele.</p> <p><code>man &lt;comando&gt;</code> \u21d2 Fornece informa\u00e7\u00f5es sobre o comando, utiliza\u00e7\u00e3o semelhante ao <code>\u2014help</code> mas com a diferen\u00e7a que \u00e9 exibido no modo de leitura e n\u00e3o diretamente impresso no terminal.</p>"},{"location":"shell/comandos/#manipular-inputoutput-de-outros-comandos","title":"Manipular input/output de outros comandos","text":"<p><code>|</code> \u21d2 O nome desse s\u00edmbolo \u00e9 pipe, basicamente sinaliza para o shell pegar o output da esquerda e usar como input para o que vier na direita.</p> <p>Exemplo:</p> <p><code>ls -l | tail -n1</code> \u21d2 <code>ls -l</code> imprime tudo que tem na pasta, o pipe pega esses dados e joga para o tail, que imprime apenas a \u00faltima linha.</p> <p><code>&lt;input&gt; **&gt;** &lt;output&gt;</code> \u21d2 Direciona o input gerado na esquerda para dentro do comando executado a direita.</p> <p>Exemplo:</p> <p><code>echo hello &gt; hello.txt</code></p> <p>Aqui estamos fornecendo para o comando echo a entrada \u201chello\u201d, e enviando esse input direto para dentro do arquivo hello.txt (se ele n\u00e3o existir, vamos criar um do zero).</p> <p><code>&lt;input&gt; **&lt;** &lt;output&gt;</code> \u21d2 Direciona o output da direita, como um input para o o comando da esquerda.</p> <p>Exemplo:</p> <p><code>cat &lt; hello.txt</code></p> <p>Basicamente estamos pegando um output (o que est\u00e1 escrito dentro do arquivo) e dizendo para o terminal usar isso como input para o comando cat.</p> <p><code>&gt;&gt;</code> \u21d2 Mesma ideia do comando citado acima, com a diferen\u00e7a que ao inv\u00e9s de causar um overwrite (apagar tudo e substituir pela informa\u00e7\u00e3o nova) ele d\u00e1 um append (junta a informa\u00e7\u00e3o antiga com a nova).</p>"},{"location":"shell/comandos/#sudo-e-usuario-root","title":"Sudo e usu\u00e1rio Root","text":"<p><code>Sudo &lt;comando que deseja realizar&gt;</code> \u2192 Comando para poder executar algum outro comando como usu\u00e1rio root (com todas as permiss\u00f5es). Sudo basicamente significa Superuser Do.</p> <p><code>#</code> \u21d2 \u00c9 usado no terminal para indicar que voc\u00ea est\u00e1 executando as coisas como root user.</p> <p><code>sudo su</code> \u21d2 Troca o terminal pra modo root, voc\u00ea roda tudo como usu\u00e1rio root e pode fazer tudo. Usar com cautela.</p>"},{"location":"shell/teoria/","title":"Algumas informa\u00e7\u00f5es interessantes","text":"<p>Anota\u00e7\u00f5es baseadas na aula 1 do Missing Semester of CS - MIT</p>"},{"location":"shell/teoria/#path","title":"Path","text":"<p>A mem\u00f3ria do computador, de uma forma simplificada, s\u00e3o endere\u00e7os de mem\u00f3ria onde nossas informa\u00e7\u00f5es, arquivos e etc s\u00e3o guardados.</p> <p>O Path que usamos no terminal para encontrar as pastas/arquivos que queremos, s\u00e3o uma representa\u00e7\u00e3o simplificada dessa localiza\u00e7\u00e3o.</p> <p>Caminho absoluto \u21d2 o caminho absoluto da raiz (pasta inicial do seu sistema) at\u00e9 o arquivo que voc\u00ea busca.</p> <p>Caminho relativo \u21d2 o caminho da pasta onde voc\u00ea se encontra (seja ela qual for), at\u00e9 o arquivo que voc\u00ea busca.</p>"},{"location":"shell/teoria/#permissoes-em-arquivosdiretorios","title":"Permiss\u00f5es em arquivos/diret\u00f3rios","text":"<p>As permiss\u00f5es podem ser definidas em 3 tipos:</p> <p>Read</p> <p>Para diret\u00f3rios: Voc\u00ea tem permiss\u00e3o para visualizar os arquivos que tem dentro dele.</p> <p>Para arquivos: Voc\u00ea tem permiss\u00e3o para visualizar o que est\u00e1 dentro dele.</p> <p>Write</p> <p>Para diret\u00f3rios: Voc\u00ea tem permiss\u00e3o para renomear, criar ou apagar arquivos. Se vc tem permiss\u00e3o de write em um arquivo mas n\u00e3o no diret\u00f3rio, vc pode apagar tudo dentro dele mas n\u00e3o ele.</p> <p>Para arquivos: Voc\u00ea tem permiss\u00e3o alterar o arquivo, menos apagar ele (essa permiss\u00e3o \u00e9 da pasta).</p> <p>Execute</p> <p>Para diret\u00f3rios/arquivos: Voc\u00ea pode entrar nesse diret\u00f3rio/arquivo ou executar (no caso de arquivos).</p>"},{"location":"blog/","title":"Blog","text":""}]}